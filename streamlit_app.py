import streamlit as st
from openai import OpenAI
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import cm
import tempfile
from datetime import datetime

# -----------------------
# CONFIG APP
# -----------------------
st.set_page_config(
    page_title="Atelier Cr√©atif ‚Äî EDU",
    page_icon="üé®",
    layout="centered"
)

# -----------------------
# TITRE + INTRO
# -----------------------
st.markdown("<h1 style='text-align: center; color: #4CAF50;'>üé® Atelier Cr√©atif ‚Äî EDU</h1>", unsafe_allow_html=True)
st.markdown("""
<p style="text-align: center; font-size:16px;">
Cr√©ez facilement des <b>histoires, po√®mes, chansons ou saynettes</b> pour vos √©l√®ves (6‚Äì14 ans).  
R√©pondez aux questions ‚ûù t√©l√©chargez en <b>PDF</b> ‚ú®
</p>
""", unsafe_allow_html=True)

st.info("üí° Votre cl√© OpenAI reste priv√©e et n‚Äôest jamais partag√©e.")

# -----------------------
# CL√â OPENAI
# -----------------------
import os

# R√©cup√®re la cl√© OpenAI depuis les "secrets" de Streamlit Cloud
api_key = os.environ.get("OPENAI_API_KEY")

if not api_key:
    st.error("‚ö†Ô∏è Aucune cl√© API trouv√©e. Configurez OPENAI_API_KEY dans les secrets Streamlit Cloud.")
    st.stop()

client = OpenAI(api_key=api_key)

# -----------------------
# SLIDER D'IMAGES
# -----------------------
import time

# -----------------------
# CARROUSEL AVEC BOUTONS
# -----------------------
st.markdown("## üé¨ Inspirations")

images = [
    {"file": "slide1.jpg", "caption": "‚ú® Cr√©e une histoire magique avec tes √©l√®ves"},
    {"file": "slide2.jpg", "caption": "üé≠ Joue une saynette pleine d‚Äô√©motion"},
    {"file": "slide4.jpg", "caption": "üéµ Compose une chanson collaborative"},
]

# Initialisation
if "carousel_index" not in st.session_state:
    st.session_state.carousel_index = 0

# Affiche l‚Äôimage actuelle
img = images[st.session_state.carousel_index]
st.markdown(
    f"""
    <div style='
        position: relative; 
        border-radius: 15px; 
        overflow: hidden; 
        box-shadow: 0 4px 12px rgba(0,0,0,0.15); 
        margin-bottom: 20px;'>
        <img src='{img["file"]}' style='width:100%; border-radius:15px;'>
        <div style='
            position: absolute; 
            bottom: 10px; 
            left: 0; 
            width: 100%; 
            background: rgba(0,0,0,0.5); 
            color: white; 
            text-align: center; 
            padding: 8px; 
            font-size: 16px; 
            border-bottom-left-radius: 15px;
            border-bottom-right-radius: 15px;'>
            {img["caption"]}
        </div>
    </div>
    """,
    unsafe_allow_html=True
)

# Boutons navigation
col1, col2, col3 = st.columns([1,6,1])
with col1:
    if st.button("‚¨ÖÔ∏è"):
        st.session_state.carousel_index = (st.session_state.carousel_index - 1) % len(images)
with col3:
    if st.button("‚û°Ô∏è"):
        st.session_state.carousel_index = (st.session_state.carousel_index + 1) % len(images)
# -----------------------
# QUESTIONS + SUGGESTIONS MULTILINGUES
# -----------------------
QPACK = {
    "FR": {
        "üìö Histoire": [
            {"q": "H√©ros/h√©ro√Øne ?", "sug": ["Fillette curieuse", "Gar√ßon inventeur", "Chat qui parle"]},
            {"q": "Lieu ?", "sug": ["Cour d‚Äô√©cole", "For√™t magique", "Bus scolaire"]},
            {"q": "Objectif ?", "sug": ["Retrouver un tr√©sor", "Aider un ami", "Gagner un concours"]},
            {"q": "Obstacle ?", "sug": ["Orage", "Rival jaloux", "Labyrinthe"]},
            {"q": "Alli√© ?", "sug": ["Meilleure amie", "Professeur", "√âcureuil"]},
        ],
        "üé≠ Saynette": [
            {"q": "Personnages ?", "sug": ["Deux amis", "Prof et √©l√®ve", "Fr√®res"]},
            {"q": "Lieu ?", "sug": ["Cantine", "Bus", "Gymnase"]},
            {"q": "Conflit ?", "sug": ["Quiproquo", "Objet perdu", "Concours rat√©"]},
            {"q": "Accessoire ?", "sug": ["Sac", "Affiche", "T√©l√©phone"]},
            {"q": "Moment fort ?", "sug": ["R√©plique culte", "Chute", "Impro"]},
        ],
        "‚úíÔ∏è Po√®me": [
            {"q": "Sujet ?", "sug": ["Pluie", "Montagne", "Amiti√©"]},
            {"q": "√âmotion ?", "sug": ["Doux", "Dr√¥le", "Myst√©rieux"]},
            {"q": "Forme ?", "sug": ["Alexandrin", "Rimes crois√©es", "Ha√Øku", "Libre"]},
            {"q": "Strophe ?", "sug": ["Courte", "Moyenne", "Longue"]},
            {"q": "Dernier vers ?", "sug": ["Espoir", "Sourire", "Secret"]},
        ],
        "üéµ Chanson": [
            {"q": "Th√®me ?", "sug": ["Voyage", "√âcole", "Amiti√©"]},
            {"q": "√âmotion ?", "sug": ["Joie", "Nostalgie", "Courage"]},
            {"q": "Style ?", "sug": ["Rap", "Pop", "Jazz", "Folk"]},
            {"q": "Refrain ?", "sug": ["Mot r√©p√©t√©", "Onomatop√©es", "Question/r√©ponse"]},
            {"q": "Tempo ?", "sug": ["Lent", "Moyen", "Rapide"]},
        ],
        "‚ú® Libre": [
            {"q": "Id√©e libre ?", "sug": ["Dragon v√©g√©tarien", "Ville sous l‚Äôeau", "Robot timide"]},
            {"q": "Lieu ?", "sug": ["Toit", "For√™t", "Plage"]},
            {"q": "Objet ?", "sug": ["Carnet", "Boussole", "Graine d‚Äô√©toile"]},
            {"q": "Alli√© ?", "sug": ["Voisin", "Chat", "Cam√©raman"]},
            {"q": "Obstacle ?", "sug": ["Panne", "Temps limit√©", "Promesse"]},
        ],
    },
    "EN": {
        "üìö Histoire": [
            {"q": "Hero / Heroine?", "sug": ["Curious girl", "Inventor boy", "Talking cat"]},
            {"q": "Place?", "sug": ["Schoolyard", "Magic forest", "School bus"]},
            {"q": "Goal?", "sug": ["Find a treasure", "Help a friend", "Win a contest"]},
            {"q": "Obstacle?", "sug": ["Storm", "Jealous rival", "Maze"]},
            {"q": "Ally?", "sug": ["Best friend", "Teacher", "Squirrel"]},
        ],
        # ... m√™me structure pour Saynette/Poem/Song/Free (traduit en anglais)
    },
    # Idem pour ES, DE, IT (tu peux remplir avec les packs traduits comme dans ton JS d‚Äôavant)
}

# -----------------------
# AFFICHAGE QUESTIONS
# -----------------------
st.markdown("### üìù R√©pondez aux questions")
answers = []
questions = QPACK.get(lang, QPACK["FR"]).get(activity, [])
progress = st.progress(0)

for i, q in enumerate(questions, start=1):
    colA, colB = st.columns([3, 2])
    with colA:
        val = st.text_input(f"**{i}. {q['q']}**", key=f"q{i}")
    with colB:
        suggestion = st.selectbox("Suggestions", [""] + q["sug"], key=f"sug{i}")
        if suggestion:
            val = suggestion
    answers.append(val)
    progress.progress(int(i / len(questions) * 100))

# -----------------------
# G√âN√âRATION DU TEXTE
# -----------------------
if st.button("ü™Ñ G√©n√©rer le texte", use_container_width=True, type="primary"):
    if not any(answers):
        st.error("‚ö†Ô∏è Veuillez r√©pondre √† au moins une question.")
    else:
        with st.spinner("‚úçÔ∏è L'IA √©crit votre cr√©ation..."):
            prompt = f"Langue : {lang}. Activit√© : {activity}. "
            prompt += "Cr√©e un texte adapt√© aux enfants (6‚Äì14 ans). Style positif et cr√©atif.\n"
            for i, a in enumerate(answers, 1):
                if a:
                    prompt += f"Q{i}: {a}\n"

            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "Tu es un assistant cr√©atif pour enfants."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.9,
                max_tokens=700
            )

            story = response.choices[0].message.content.strip()

        st.success("‚ú® Voici votre cr√©ation :")
        st.markdown(f"<div style='background:#f9f9f9; padding:15px; border-radius:10px;'>{story}</div>", unsafe_allow_html=True)

        # -----------------------
        # EXPORT EN PDF
        # -----------------------
        def create_pdf(text):
            tmp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
            c = canvas.Canvas(tmp_file.name, pagesize=A4)
            width, height = A4
            # Couverture
            c.setFont("Helvetica-Bold", 22)
            c.drawCentredString(width/2, height - 4*cm, "Atelier Cr√©atif ‚Äî EDU")
            c.setFont("Helvetica", 14)
            c.drawCentredString(width/2, height - 5*cm, activity)
            c.setFont("Helvetica-Oblique", 10)
            c.drawCentredString(width/2, height - 6*cm, datetime.now().strftime("%d/%m/%Y"))
            c.showPage()
            # Texte
            c.setFont("Helvetica", 12)
            y = height - 3*cm
            for line in text.split("\n"):
                for subline in [line[i:i+90] for i in range(0, len(line), 90)]:
                    c.drawString(2*cm, y, subline)
                    y -= 15
                    if y < 2*cm:
                        c.showPage()
                        c.setFont("Helvetica", 12)
                        y = height - 3*cm
            c.save()
            return tmp_file.name

        pdf_path = create_pdf(story)

        with open(pdf_path, "rb") as f:
            st.download_button(
                label="‚¨áÔ∏è T√©l√©charger en PDF",
                data=f,
                file_name="atelier_creatif.pdf",
                mime="application/pdf",
                use_container_width=True
            )

